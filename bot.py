import telebot
from threading import Thread
import schedule
import time
import datetime
from datetime import date, timedelta
import requests
import json
import configparser
from telebot import types
import logging
logging.basicConfig(filename='log_bot.log', encoding='utf-8', level=logging.INFO)
# create logger
logger = logging.getLogger('log_bot')
logger.setLevel(logging.DEBUG)

# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

# create formatter
# formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# add formatter to ch
# ch.setFormatter(formatter)

# add ch to logger
logger.addHandler(ch)

config = configparser.ConfigParser()
config.sections()
config.read('settings.ini')
HOST = config['MAIN']['HOST'];
API = config['MAIN']['API'];
wDay = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

bot = telebot.TeleBot('')
klasses = []
teachers = []
cabs = []

configCache = configparser.ConfigParser()
configCache.read('cache.ini')
def getActiveKlasses():
    myresult = requests.get(f"http://{str(HOST)}/api/getactiveklasses")
    myresult = json.loads(myresult.text)
    global klasses
    klasses = myresult
    logger.info(f"{str(datetime.datetime.now())} - –ö–ª–∞—Å—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
def getActiveTeachers():
    myresult = requests.get(f"http://{str(HOST)}/api/getactiveteachers")
    myresult = json.loads(myresult.text)
    global teachers
    teachers = myresult
    logger.info(f"{str(datetime.datetime.now())} - –£—á–∏—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
def getActiveCabs():
    myresult = requests.get(f"http://{str(HOST)}/api/getactivecabs")
    myresult = json.loads(myresult.text)
    global cabs
    cabs = myresult
    logger.info(f"{str(datetime.datetime.now())} - –ö–∞–±–∏–Ω–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def send_repls():
    while(True):
        myresult = requests.get(f"http://{str(HOST)}/api/getsend")
        myresult = json.loads(myresult.text)
        logger.info(f"{str(datetime.datetime.now())} - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–º–µ—â–µ–Ω–∏–π")
        # print(myresult)
        for x in myresult:
            logger.info(f"{str(datetime.datetime.now())} - –ó–∞–º–µ—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
            if (x['send']==0):
                myresult2 = requests.get(f"http://{str(HOST)}/api/getsubs?teacher="+str('teacher')+"&klass="+str('klass'))
                myresult2 = json.loads(myresult2.text)
                # print(myresult2)
                for y in myresult2:
                    dt = str(x['dt']).split('-')
                    day = wDay[int(datetime.date(int(dt[0]), int(dt[1]), int(dt[2])).weekday())]
                    if (x['comment'] != ' '):
                        print(x['comment'])
                        comment = f"üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{x['comment']}</b>"
                    else:
                        comment = ""
                    bot.send_message(y['chat_id'], "üî¥–ó–ê–ú–ï–©–ï–ù–ò–ï\n"+
                                           f"üóì–î–∞—Ç–∞: <b>{str(datetime.datetime.strptime(x['dt'], '%Y-%m-%d').date().strftime('%d.%m.%Y'))}</b>\n"+
                                            "üìå–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: "+day+"\n"+
                                                                "üëâ‚Ññ–£—Ä–æ–∫–∞: "+str(x['lesson'])+"\n"+
                                                                                      "üî¨–ü—Ä–µ–¥–º–µ—Ç: "+x['subj']+"\n"+
                                                                                     "üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: "+x['fio']+"\n"+
                                                                                                                "üë•–ö–ª–∞—Å—Å: "+x['kl_name']+"\n"+
                                     "üè´–ö–∞–±–∏–Ω–µ—Ç: " + x['cab_name'] + "\n" + comment + "\n\n", parse_mode="HTML")
                requests.get(f"http://{str(HOST)}/api/setsend?token={API}&r_id={str(x['r_id'])}")
                logger.info(f"{str(datetime.datetime.now())} - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–µ—â–µ–Ω–∏–∏ –≤ –∫–ª–∞—Å—Å–µ {x['kl_name']} —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {x['fio']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        time.sleep(60)

# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
th1 = Thread(target=send_repls, args=())
# –ò –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
th1.start()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("üîî –û–ø–æ–≤–µ—â–∞–Ω–∏—è")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=markup)
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")
@bot.message_handler(content_types=['text'])
def getText(message):
    if (message.text == 'üîî –û–ø–æ–≤–µ—â–∞–Ω–∏—è'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–û–ø–æ–≤–µ—â–µ–Ω–∏—è'")
        subs = requests.get(f"http://{str(HOST)}/api/getsubs")
        subs = json.loads(subs.text)
        SubThere = False
        btn1 = types.KeyboardButton("")
        btn2 = types.KeyboardButton("–ù–ê–ó–ê–î")
        text = ""
        for i in subs:
            if (i['chat_id']==message.chat.id):
                SubThere = True
        if (SubThere):
            text = '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
            btn1 = types.KeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è")
        else:
            text = '–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –±—ã–ª–∞.'
            btn1 = types.KeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
        markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, text, reply_markup=markup)
    if (message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'")
        subs = requests.get(f"http://{str(HOST)}/api/subs/unsubscribe?token={API}&chatid={message.chat.id}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        btn2 = types.KeyboardButton("üîî –û–ø–æ–≤–µ—â–∞–Ω–∏—è")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", reply_markup=markup)
    if (message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'")
        try:
            typeRasp = configCache.get('typeRasp', str(message.chat.id))
            dataRasp = configCache.get('dataRasp', str(message.chat.id))
            if (typeRasp == 'cab'):
                bot.send_message(message.chat.id, '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!')
                return

        except Exception as e:
            bot.send_message(message.chat.id,
                     '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')
        subs = ''
        if (typeRasp == 'klass'):
            subs = requests.get(f"http://{str(HOST)}/api/subs/subscribe?token={API}&chatid={message.chat.id}&klass={dataRasp}&teacher=0")
        elif(typeRasp == 'teacher'):
            subs = requests.get(
                f"http://{str(HOST)}/api/subs/subscribe?token={API}&chatid={message.chat.id}&teacher={dataRasp}&klass=0")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        btn2 = types.KeyboardButton("üîî –û–ø–æ–≤–µ—â–∞–Ω–∏—è")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", reply_markup=markup)
    if (message.text == 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'")
        # markup = types.ReplyKeyboardMarkupMarkup(row_width=2)
        btn1 = types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è")
        btn2 = types.KeyboardButton("–ó–∞–≤—Ç—Ä–∞")
        btn3 = types.KeyboardButton("–ù–µ–¥–µ–ª—è")
        btn4 = types.KeyboardButton("–ö–ª–∞—Å—Å")
        btn5 = types.KeyboardButton("–ê—É–¥–∏—Ç–æ—Ä–∏—è")
        btn6 = types.KeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")
        btn7 = types.KeyboardButton("–ù–ê–ó–ê–î")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True).row(
            btn1, btn2, btn3
        ).row(btn7, btn4, btn5, btn6)
        bot.send_message(message.chat.id, "–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=markup)
    if (message.text == '–ö–ª–∞—Å—Å'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ö–ª–∞—Å—Å'")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å")
        bot.register_next_step_handler(msg, setKlass)
    if (message.text == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
        bot.register_next_step_handler(msg, setTeacher)
    if (message.text == '–ê—É–¥–∏—Ç–æ—Ä–∏—è'):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ê—É–¥–∏—Ç–æ—Ä–∏—è'")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ‚Ññ–ö–∞–±–∏–Ω–µ—Ç–∞")
        bot.register_next_step_handler(msg, setCab)
    if (message.text == "–°–µ–≥–æ–¥–Ω—è"):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–°–µ–≥–æ–¥–µ—è'")
        try:
            typeRasp = configCache.get('typeRasp', str(message.chat.id))
            dataRasp = configCache.get('dataRasp', str(message.chat.id))
            getRaspByKlassDay(message, dataRasp, 0, typeRasp)
        except Exception as e:
            bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')
    if (message.text == "–ó–∞–≤—Ç—Ä–∞"):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ó–∞–≤—Ç—Ä–∞'")
        try:
            typeRasp = configCache.get('typeRasp', str(message.chat.id))
            dataRasp = configCache.get('dataRasp', str(message.chat.id))
            getRaspByKlassDay(message, dataRasp, 1, typeRasp)
        except Exception as e:
            bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')
    if (message.text == "–ù–µ–¥–µ–ª—è"):
        logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª '–ù–µ–¥–µ–ª—è'")
        try:
            typeRasp = configCache.get('typeRasp', str(message.chat.id))
            dataRasp = configCache.get('dataRasp', str(message.chat.id))
            getRaspByKlassWeek(message, dataRasp, typeRasp)
        except Exception as e:
            bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–ª–∞—Å—Å, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')
    if (message.text == "–ù–ê–ó–ê–î"):
        start(message)

def setKlass(message):
    kl_id = -1
    for i in klasses:
        if (str.casefold(message.text) == str.casefold(i['kl_name'])):
            kl_id = i['id']
    if (kl_id == -1):
        bot.send_message(message.chat.id, '–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return
    configCache.set('typeRasp', str(message.chat.id), 'klass');
    configCache.set('dataRasp', str(message.chat.id), str(kl_id))
    with open('cache.ini', "w") as config_file:
        configCache.write(config_file)
    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ!')
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª –∫–ª–∞—Å—Å {message.text}")
def setTeacher(message):
    t_id = -1
    for i in teachers:
        if (str.casefold(message.text) == str.casefold(i['fio'])):
            t_id = i['id']
    if (t_id == -1):
        bot.send_message(message.chat.id, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return
    configCache.set('typeRasp', str(message.chat.id), 'teacher');
    configCache.set('dataRasp', str(message.chat.id), str(t_id))
    with open('cache.ini', "w") as config_file:
        configCache.write(config_file)
    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ!')
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {message.text}")
def setCab(message):
    c_id = -1
    for i in cabs:
        if (str.casefold(message.text) == str.casefold(i['cab_name'])):
            c_id = i['id']
    if (c_id == -1):
        bot.send_message(message.chat.id, '–ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        return
    configCache.set('typeRasp', str(message.chat.id), 'cab');
    configCache.set('dataRasp', str(message.chat.id), str(c_id))
    with open('cache.ini', "w") as config_file:
        configCache.write(config_file)
    bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ!')
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤–≤—ë–ª –∞—É–¥–∏—Ç–æ—Ä–∏—é {message.text}")
def setTypeOfRasp(message):
    configCache.set('dataRasp', str(message.chat.id), message.text)
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–±—Ä–∞–ª –ø–æ–∏—Å–∫ –ø–æ {message.text}")
def getRaspByKlassDay(message, id, tod, type):
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–∑–≤–∞–ª –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É {tod}, {type}, {id}")
    dt = date.today();
    if (tod == 0):
        pass
    else:
        dt = date.today() + timedelta(days=1)
    myresult = requests.get(f"http://{HOST}/api/getraspbyday?token={API}&dt={dt}")
    myresult = json.loads(myresult.text)
    raspList = []
    for y in myresult:
        if (type=='klass'):
            if (str(y['klass']) == str(id)):
                raspList.append(y)
        elif (type=='teacher'):
            if (str(y['teacher']) == str(id)):
                raspList.append(y)
        elif (type=='cab'):
            if (str(y['cab']) == str(id)):
                raspList.append(y)
    text = ""
    if (tod == 0):
        text = "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø\n\n"
    else:
        text = "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ó–ê–í–¢–†–ê\n\n"
    comment = ""
    dt = ""
    for i in raspList:
        if i['grp'] == 1:
            text += "<u>–ì–†–£–ü–ü–û–í–û–ï –ó–ê–ù–Ø–¢–ò–ï</u>\n"
        if i['grp'] == 2:
            text += "<u>–ó–ê–ú–ï–©–ï–ù–ò–ï</u>\n"
            dt = f"üóì–î–∞—Ç–∞: <b>{str(datetime.datetime.strptime(i['dt'], '%Y-%m-%d').date().strftime('%d.%m.%Y'))}</b>\n"
            if (i['comment'] != ' '):
                comment = f"üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{i['comment']}</b>"
            else:
                comment = ""
        text += dt+"üëâ‚Ññ–£—Ä–æ–∫–∞: <b>" + str(i['lesson']) + "</b>\n" \
                                                    "üî¨–ü—Ä–µ–¥–º–µ—Ç: <b>" + i['subj'] + "</b>\n" \
                                                                                  "üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>" + i[
                    'fio'] + "</b>\n" \
                             "üë•–ö–ª–∞—Å—Å: <b>" + i['kl_name'] + "</b>\n" \
                                                            "üè´–ö–∞–±–∏–Ω–µ—Ç: <b>" + i[
                    'cab_name'] + "</b>\n" + comment + "\n\n"
        comment = ""
        dt = ""
    if (text == "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ó–ê–í–¢–†–ê\n\n" or text == "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø\n\n"):
        text += "ü§ó –£–†–ê! –í—ã—Ö–æ–¥–Ω–æ–π!"
    bot.send_message(message.chat.id, text, parse_mode="HTML")
def getRaspByKlassWeek(message, id, type):
    logger.info(f"{str(datetime.datetime.now())} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –≤—ã–∑–≤–∞–ª –ø–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É {type}, {id} –Ω–∞ –Ω–µ–¥–µ–ª—é")
    myresult = ''
    if (type=='klass'):
        myresult = requests.get(f"http://{str(HOST)}/getrasp?klass={id}&teacher=0&cab=0")
    elif (type=='teacher'):
        myresult = requests.get(f"http://{str(HOST)}/getrasp?klass=0&teacher={id}&cab=0")
    elif (type=='cab'):
        myresult = requests.get(f"http://{str(HOST)}/getrasp?klass=0&teacher=0&cab={id}")
    # print(myresult)
    myresult = json.loads(myresult.text)
    days = [[],[],[],[],[],[],[]]
    for i in myresult:
        if (i['day']=='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'):
            days[0].append(i)
        if (i['day']=='–í—Ç–æ—Ä–Ω–∏–∫'):
            days[1].append(i)
        if (i['day']=='–°—Ä–µ–¥–∞'):
            days[2].append(i)
        if (i['day']=='–ß–µ—Ç–≤–µ—Ä–≥'):
            days[3].append(i)
        if (i['day']=='–ü—è—Ç–Ω–∏—Ü–∞'):
            days[4].append(i)
        if (i['day']=='–°—É–±–±–æ—Ç–∞'):
            days[5].append(i)
        if (i['day']=='–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'):
            days[6].append(i)
    text = "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï\n\n"
    comment = ""
    dt = ""
    for day in days:
        try:
            text += f"<b><u>=={str.upper(day[0]['day'])}==</u></b>\n\n"
        except Exception as e:
            pass
        for lesson in day:
            if lesson['grp'] == 1:
                text += "<u>–ì–†–£–ü–ü–û–í–û–ï –ó–ê–ù–Ø–¢–ò–ï</u>\n"
            if lesson['grp'] == 2:
                text += "<u>–ó–ê–ú–ï–©–ï–ù–ò–ï</u>\n"
                dt = f"üóì–î–∞—Ç–∞: <b>{str(datetime.datetime.strptime(lesson['dt'], '%Y-%m-%d').date().strftime('%d.%m.%Y'))}</b>\n"
                if (lesson['comment'] != ' '):
                    comment = f"üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{lesson['comment']}</b>"
                else:
                    comment = ""
            text += dt+"üëâ‚Ññ–£—Ä–æ–∫–∞: <b>" + str(lesson['lesson']) + "</b>\n" \
                                                        "üî¨–ü—Ä–µ–¥–º–µ—Ç: <b>" + lesson['subj'] + "</b>\n" \
                                                                                      "üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>" + lesson[
                        'fio'] + "</b>\n" \
                                 "üë•–ö–ª–∞—Å—Å: <b>" + lesson['kl_name'] + "</b>\n" \
                                                                "üè´–ö–∞–±–∏–Ω–µ—Ç: <b>" + lesson[
                        'cab_name'] + "</b>\n" + comment + "\n\n"
            comment = ""
            dt = ""
    bot.send_message(message.chat.id, text, parse_mode="HTML")
    # print(days)
def job():
    logger.info(f"{str(datetime.datetime.now())} - –í—ã–ø–æ–ª–Ω–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å")
    dt = date.today() + timedelta(days=1)
    subs = requests.get(f"http://{HOST}/api/getsubs");
    subs = json.loads(subs.text)

    for x in subs:
        raspList = []
        myresult = None
        rasp = requests.get(f'http://{HOST}/api/getraspbyday?token={API}&dt={dt}')
        if (rasp.status_code==403):
            return;
        myresult = json.loads(rasp.text)
        delNumb = []
        for i in myresult:
            if (i['grp'] == 2):
                for j in range(len(myresult)):
                    if (i['klass']==myresult[j]['klass'] and i['lesson']==myresult[j]['lesson'] and myresult[j]['grp']!=2):
                        delNumb.append(j)
        for i in delNumb:
            myresult.pop(i)
        for y in myresult:
            # print(y)
            if (x['klass']!=0 and y['klass']==x['klass']):
                raspList.append(y)
            if (x['teacher']!=0 and y['teacher']==x['teacher']):
                raspList.append(y)
        # print(raspList)

        text = "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ó–ê–í–¢–†–ê\n\n"
        comment = ""
        dt = ""
        for i in raspList:
            if i['grp']==1:
                text+= "<u>–ì–†–£–ü–ü–û–í–û–ï –ó–ê–ù–Ø–¢–ò–ï</u>\n"
            if i['grp']==2:
                text+= "<u>–ó–ê–ú–ï–©–ï–ù–ò–ï</u>\n"
                dt = f"üóì–î–∞—Ç–∞: <b>{str(datetime.datetime.strptime(i['dt'], '%Y-%m-%d').date().strftime('%d.%m.%Y'))}</b>\n"
                if (i['comment']!= ' '):
                    comment = f"üí¨–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <b>{i['comment']}</b>"
                else:
                    comment = ""
            text += dt+"üëâ‚Ññ–£—Ä–æ–∫–∞: <b>" + str(i['lesson']) + "</b>\n" \
                                    "üî¨–ü—Ä–µ–¥–º–µ—Ç: <b>" +i['subj'] + "</b>\n" \
                                     "üë©‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>" + i['fio'] + "</b>\n" \
                                                                    "üë•–ö–ª–∞—Å—Å: <b>" + i['kl_name'] + "</b>\n" \
                                                                                         "üè´–ö–∞–±–∏–Ω–µ—Ç: <b>" + i['cab_name'] + "</b>\n"+comment+"\n\n"
            comment = ""
            dt = ""
        if (text == "üî¥–†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –ó–ê–í–¢–†–ê\n\n"):
            text += "ü§ó –£–†–ê! –í—ã—Ö–æ–¥–Ω–æ–π!"
        bot.send_message(x['chat_id'], text, parse_mode="HTML")

schedule.every().day.at("21:00").do(job)

def shed():
    while True:
        schedule.run_pending()
        time.sleep(60) # wait one minute

getActiveKlasses()
getActiveTeachers()
getActiveCabs()
# job()
# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
th2 = Thread(target=shed, args=())
# –ò –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
th2.start()
logger.info(f"{str(datetime.datetime.now())} - –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

bot.infinity_polling();